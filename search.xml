<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>9.25 周报</title>
      <link href="/2024/09/25/9.25-zhou-bao/"/>
      <url>/2024/09/25/9.25-zhou-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="9-25-周报"><a href="#9-25-周报" class="headerlink" title="9.25 周报"></a>9.25 周报</h1><h2 id="《苍穹外卖》项目开发（22-25号三天进度20-）"><a href="#《苍穹外卖》项目开发（22-25号三天进度20-）" class="headerlink" title="《苍穹外卖》项目开发（22-25号三天进度20%）"></a>《苍穹外卖》项目开发（22-25号三天进度20%）</h2><ol><li>熟悉接口文档，使用yapi和swagger查看接口文档，postman接口测试,使用git管理代码。maven框架</li><li>开发员工登录接口，使用jwt令牌+拦截器完成登陆安全保护</li><li>开发员工分页查询接口，使用PageHelper分页插件简化sql查询</li><li>使用AOP实现更新时间、更新用户字段的自动填充：</li></ol><ul><li>自定义注解@AutoFill</li><li>在切面类AutoFillAspect用@Annotation扫描自定义注解</li><li>在切面类定义 ：当前时间和当前用户字段</li><li>获取方法签名对象&#x3D;&gt;获得注解对象&#x3D;&gt;获得value  ，再获得此实体对象，最后通过反射，完成赋值</li><li>在mapper层接口的删除和修改方法上添加@AutoFill注解</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>9.22周报</title>
      <link href="/2024/09/22/9.22-zhou-bao/"/>
      <url>/2024/09/22/9.22-zhou-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="9-22周报"><a href="#9-22周报" class="headerlink" title="9.22周报"></a>9.22周报</h1><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><ol><li>分模块管理</li><li>继承<ul><li>创建父模块，设置打包方式为pom</li><li>在子工程的pom.xml文件中，配置继承关系。</li><li>在父工程中配置各个工程共有的依赖</li></ul></li><li>版本锁定 ：在父工程的pom文件中通过 <dependencyManagement>标签 ； 使用<properties> 标签设置版本号变量</li><li>聚合 ：用于快速构建项目；<br> * 在父工程或聚合工程使用<modules> 标签</li><li>私服：公司内部的maven仓库，通过配置config文件来连接</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>《苍穹外卖》项目：着手搭建环境</li><li>面试题：&lt;dependencies&gt;和&lt;dependencyManagement&gt;标签的区别： ①前者是直接依赖，用于导入依赖包  ②后者是进行版本管理，不引入依赖包</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>敏捷开发和DevOps</title>
      <link href="/2024/09/20/hua-wei-yun-codearts-feng-huang-shang-cheng-xiang-mu-shi-jian/"/>
      <url>/2024/09/20/hua-wei-yun-codearts-feng-huang-shang-cheng-xiang-mu-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="凤凰商城项目实践"><a href="#凤凰商城项目实践" class="headerlink" title="凤凰商城项目实践"></a>凤凰商城项目实践</h1><h2 id="一、持续规划与设计"><a href="#一、持续规划与设计" class="headerlink" title="一、持续规划与设计"></a>一、持续规划与设计</h2><h3 id="1-1敏捷项目规划"><a href="#1-1敏捷项目规划" class="headerlink" title="1.1敏捷项目规划"></a>1.1敏捷项目规划</h3><h4 id="1-1-1-创建华为云-CodeArts-项目"><a href="#1-1-1-创建华为云-CodeArts-项目" class="headerlink" title="1.1.1 创建华为云 CodeArts 项目"></a>1.1.1 创建华为云 CodeArts 项目</h4><ul><li><p>进入控制台，在控制台中选择区域为＂华北-北京四,搜索 CodeArts 并登陆，单击页面＂新建项目＂</p><img src="./images/01.png"><h4 id="1-1-2-使用-Scrum-项目模板进行项目规划，并管理-Epic-和-Feature"><a href="#1-1-2-使用-Scrum-项目模板进行项目规划，并管理-Epic-和-Feature" class="headerlink" title="1.1.2 使用 Scrum 项目模板进行项目规划，并管理 Epic 和 Feature"></a>1.1.2 使用 Scrum 项目模板进行项目规划，并管理 Epic 和 Feature</h4></li><li><p>项目规划。打开凤凰商城项目，单击＂规划＂，点击＂思维导图规划＂，输入“思维导<br>图”，点击确认</p><img src="./images/02.png"></li><li><p>在 Epic＂凤凰商城＂下方单击图标＂插入子节点 ＂新建 Feature，输入标题＂门店网<br>络＂，回车保存；相同方式新建 Feature“账号系统</p><img src="./images/04.png"><img src="./images/05.png"></li><li><p>导出项目规划。可以将项目规划导出到 Excel或者以图片导出</p><img src="./images/06.png"></li></ul><h4 id="1-1-3-使用-Scrum-项目模板管理-Backlog-并进行迭代开发"><a href="#1-1-3-使用-Scrum-项目模板管理-Backlog-并进行迭代开发" class="headerlink" title="1.1.3 使用 Scrum 项目模板管理 Backlog 并进行迭代开发"></a>1.1.3 使用 Scrum 项目模板管理 Backlog 并进行迭代开发</h4><ul><li><p>单击＂工作&gt;工作项&gt;Backlog＂，进入 Backlog 页面,单击 Story 名称＂作为用户应该可以查看、查询所有门店网络＂，编辑 Story</p><img src="./images/07.png"></li><li><p>在 Backlog 列表中，我们同时可以设置自己关注的用户故事，方便查询。拖动列表下方滚<br>动条到最右方，单击图标 即可关注，当图标变成蓝色，表示关注成功。</p><img src="./images/08.png"></li><li><p>迭代的创建与管理。单击＂工作 &gt; 迭代＂，进入迭代管理视图。</p><img src="./images/09.png"></li><li><p>迭代规划,添加三个<br>Story 添加至迭代 4</p> <img src="./images/10.png"></li><li><p>Story 分解。接下来我们需要将 Story＂作为用户应该可以查看、查询所有门店网络＂拆分<br>到开发任务级别，并指派给对应的负责人。单击工作项列表最右侧＂操作＂列中的图标 ，<br>新建子 Task。输入 Task 标题＂前端展示-添加门店网络菜单＂，并选择处理人，单击＂确<br>定＂完成。按照同样的方式，添加 Task＂后台管理-添加门店网络管理维护模块＂。</p> <img src="./images/11.png"></li><li><p>看板视图使用。点击右上角图标 ，切换视图为＂卡片模式＂。在此模式下，可通过拖拽<br>修改工作项状态。</p> <img src="./images/12.png"></li></ul><h4 id="1-1-4-使用效率工具监测和跟踪项目状"><a href="#1-1-4-使用效率工具监测和跟踪项目状" class="headerlink" title="1.1.4 使用效率工具监测和跟踪项目状"></a>1.1.4 使用效率工具监测和跟踪项目状</h4><ul><li><p>选择迭代 4 工作项，单击工作项列表上方的图标 ，即可展开迭代进度视图。如果是<br>新创建的项目，在项目创建第二天可看到报表效果。</p> <img src="./images/13.png"></li><li><p>单击页面左侧导航＂仪表盘＂，进入＂仪表盘＂页面。</p> <img src="./images/14.png"></li></ul><h3 id="1-2-项目管理配置"><a href="#1-2-项目管理配置" class="headerlink" title="1.2 项目管理配置"></a>1.2 项目管理配置</h3><h4 id="1-2-1-维护项目基本信息"><a href="#1-2-1-维护项目基本信息" class="headerlink" title="1.2.1 维护项目基本信息"></a>1.2.1 维护项目基本信息</h4><ul><li>项目基本信息设置。进入项目，单击页面左侧导航＂设置 &gt; 通用设置＂。单击页面左侧菜单＂基本信息＂，进入＂基本信息＂页面<img src="./images/15.png"></li><li>进入＂模块设置＂页面。单击＂添加＂，输入名称、描述，选择负责人，单<br>击＂确定＂保存<img src="./images/extra01.png"></li></ul><h4 id="1-2-2-定制项目工作流程"><a href="#1-2-2-定制项目工作流程" class="headerlink" title="1.2.2 定制项目工作流程"></a>1.2.2 定制项目工作流程</h4><ul><li><p>增加工作项字段。</p><img src="./images/16.png"></li><li><p>将＂验收标准＂拖至 ＂以下为查看更多的内容＂上方，并勾选为必填字段，单击＂保<br>存＂。</p><img src="./images/17.png"></li><li><p>增加工作项状态。</p><img src="./images/18.png"></li><li><p>单击页面左侧菜单＂Story 设置 &gt; 状态与流转＂，进入＂工作项状态＂页面。单击＂添加<br>已有状态＂，在弹框中勾选＂验收中＂，单击＂确定＂保存。</p><img src="./images/19.png"></li></ul><h2 id="二、持续开发与集成"><a href="#二、持续开发与集成" class="headerlink" title="二、持续开发与集成"></a>二、持续开发与集成</h2><h3 id="2-1-代码托管"><a href="#2-1-代码托管" class="headerlink" title="2.1 代码托管"></a>2.1 代码托管</h3><h4 id="2-1-1-使用-CloudIDE-修改和提交代码"><a href="#2-1-1-使用-CloudIDE-修改和提交代码" class="headerlink" title="2.1.1 使用 CloudIDE 修改和提交代码"></a>2.1.1 使用 CloudIDE 修改和提交代码</h4><ul><li><p>进入＂Backlog＂页面。找到 Story＂作为用户<br>应该可以查看、查询所有门店网络＂，记录该 Story 的编号：67092992</p><img src="./images/20.png"></li><li><p>进入 CloudIDE 服务</p> <img src="./images/21.png"></li><li><p>在终端使用git拉取代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@codehub.devcloud.cn-north-4.huaweicloud.com:98632fbb670448d196c08f0094853764/phoenix-sample.git</span><br></pre></td></tr></table></figure> <img src="./images/23.png"></li><li><p>修改代码</p> <img src="./images/24.png"></li><li><p>提交修改至代码仓库。</p><img src="./images/25.png"></li><li><p>查看代码提交记录。</p><img src="./images/26.png"></li><li><p>预览调试。</p></li></ul><img src="./images/27.png"><ul><li><p>修改 Dockerfile，py版本为3.8.0</p><img src="./images/28.png"></li><li><p>终端窗口安装两个运行必须模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask redis --user</span><br></pre></td></tr></table></figure></li><li><p>替换原有 Python2.7.x 版本代码</p>  <img src="./images/29.png"></li><li><p>运行代码（将 app.py 中第 64 行代码中的端口号改为 8088）</p><img src="./images/30.png"></li></ul><h4 id="2-1-2-使用-Git-分支-合并请求方式提交代码并进行代码检视"><a href="#2-1-2-使用-Git-分支-合并请求方式提交代码并进行代码检视" class="headerlink" title="2.1.2 使用 Git 分支+合并请求方式提交代码并进行代码检视"></a>2.1.2 使用 Git 分支+合并请求方式提交代码并进行代码检视</h4><ul><li><p>单击仓库名称，进入代码仓库。</p><img src="./images/31.png"></li><li><p>选择＂设置＂页签，在左侧导航中单击＂仓库管理 &gt; 保护分支管理＂,单击＂新建分支保护”</p><img src="./images/32.png"></li><li><p>管理分支合并策略。</p><img src="./images/33.png"></li><li><p>创建分支并进行新功能开发。</p><img src="./images/34.png"></li><li><p>用 CloudIDE 打开代码仓库，选择新创建的分支进入</p></li></ul><img src="./images/35.png"><h4 id="2-1-3-合并请求（登录模块）"><a href="#2-1-3-合并请求（登录模块）" class="headerlink" title="2.1.3 合并请求（登录模块）"></a>2.1.3 合并请求（登录模块）</h4><ul><li><p>创建合并请求，进入代码托管，选择合并请求页签，单击“新建合并请求”。</p><img src="./images/36.png"></li><li><p>输入标题、描述（选<br>填），选择合并人、评审人，单击＂确定＂完成。</p><img src="./images/37.png"></li><li><p>代码检视以及评分</p><img src="./images/37.png"></li><li><p>选择＂合入＂，系统将提示＂合并成功＂。<br><img src="/image.png" alt="alt text"></p></li></ul><h3 id="2-2-代码检查确保编码规范"><a href="#2-2-代码检查确保编码规范" class="headerlink" title="2.2 代码检查确保编码规范"></a>2.2 代码检查确保编码规范</h3><h4 id="2-2-1-为示例项目配置代码检查任务并执行"><a href="#2-2-1-为示例项目配置代码检查任务并执行" class="headerlink" title="2.2.1 为示例项目配置代码检查任务并执行"></a>2.2.1 为示例项目配置代码检查任务并执行</h4><ul><li><p>编辑代码检查任务包含语言,启动Python检查</p><img src="./images/39.png"></li><li><p>启动代码检查任务。</p>  <img src="./images/40.png"></li></ul><h4 id="2-2-2-分析代码检查结果并修复问题"><a href="#2-2-2-分析代码检查结果并修复问题" class="headerlink" title="2.2.2 分析代码检查结果并修复问题"></a>2.2.2 分析代码检查结果并修复问题</h4><ul><li><p>分析代码检查报表 单击＂代码问题＂页签，页面中列出问题的严重级别、状态、所属文件等信息。</p><img src="./images/41.png"></li><li><p>根据需要对代码进行修改 将问题设置为“已解决”</p><img src="./images/42.png"></li></ul><h4 id="2-2-3-配置和管理代码检查规则集"><a href="#2-2-3-配置和管理代码检查规则集" class="headerlink" title="2.2.3 配置和管理代码检查规则集"></a>2.2.3 配置和管理代码检查规则集</h4><ul><li><p>创建自定义检查规范。</p><img src="./images/43.png"></li><li><p>系统自动进入新建规则集的＂规则集配置＂页面。通过搜索框搜索规则＂Loops should<br>not be infinite＂，取消勾选此规则，单击＂保存＂。由于这里凤凰团队采用了取巧的方<br>案临时支持功能的展示，暂时可以关闭此问题</p><img src="./images/43.png"></li><li><p>启用自定义检查规范。</p><img src="./images/44.png"></li><li><p>启动代码检查任务，任务成功执行后，再次查看检查结果。此时的检查结果忽略了规则＂<br>Loops should not be infinite＂，检查出来的问题是团队关心的问题，应该尽快修复掉。</p><img src="./images/45.png"></li></ul><h3 id="2-3-使用自动化编译提高代码质量验证速度"><a href="#2-3-使用自动化编译提高代码质量验证速度" class="headerlink" title="2.3 使用自动化编译提高代码质量验证速度"></a>2.3 使用自动化编译提高代码质量验证速度</h3><h4 id="2-3-1-编译构建并完成应用的镜像打包推送"><a href="#2-3-1-编译构建并完成应用的镜像打包推送" class="headerlink" title="2.3.1 编译构建并完成应用的镜像打包推送"></a>2.3.1 编译构建并完成应用的镜像打包推送</h4><ul><li>查看编译构建任务。<img src="./images/47.png"></li><li>点击＂源码选择＂栏，＂仓库分支＂选择＂master”<img src="./images/48.png"></li><li>配置 SWR 服务。项目应用镜像存放需要使用到华为云容器镜像服务 (SWR) ，因此需要首<br>先配置 SWR 服务。点击＂构建步骤＂栏，找到＂华为云容器镜像服务＂并点击，复制登陆指令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u cn-north-4@X4KDTWES74A55W6DN1IX -p 55d4ce27f2eaa3e632724eccb6effd4e77a3929ae3d29fbb41875a2ac15e4c96 swr.cn-north-4.myhuaweicloud.com</span><br></pre></td></tr></table></figure>最后的字符串为 SWR 服务器地址: swr.cn-north-4.myhuaweicloud.com</li></ul><img src="./images/49.png"><ul><li><p>创建组织<br>组织名称，即为后续步骤 5 中的参数 dockerOrg : hi-pheonix-test01</p><img src="./images/50.png"></li><li><p>返回 CodeArts 页面，选择＂参数设置＂页签，编辑dockerOrg 和 dockerServer 两个参数</p><img src="./images/51.png"></li><li><p>单击＂保存并执行＂，启动编译构建任务。记录＂构建成功＂字样前面的<br>数字串（即任务的构建编号），该数字串为构建任务中的系统预定义参数 BuildNumber：，<br>在后续步骤 10 查看镜像详情中，镜像版本即此数字串</p><img src="./images/52.png"></li><li><p>单击页面上方导航＂构建&amp;发布 &gt; 发布＂，进入发布服务。列表中可找到下图所示的两个<br>文件夹</p><img src="./images/53.png"></li><li><p>进入 SWR 控制台，在页面左侧导航选择＂我的镜像＂。列表中可看到 5 个镜像，镜像的<br>所属组织为实验开始创建的组织，版本数如下图所示。</p><img src="./images/54.png"></li><li><p>在列表中单击＂worker＂查看镜像详情。</p> <img src="./images/55.png"></li></ul><h4 id="2-3-2-配置持续集成并通过提交代码触发自动化编译"><a href="#2-3-2-配置持续集成并通过提交代码触发自动化编译" class="headerlink" title="2.3.2 配置持续集成并通过提交代码触发自动化编译"></a>2.3.2 配置持续集成并通过提交代码触发自动化编译</h4><ul><li><p>持续集成配置。进入编译构建任务＂phoenix-sample-ci＂的＂编辑＂页面，选择＂执行<br>计划＂页签，打开＂提交代码触发执行＂开关，单击＂保存＂。</p><img src="./images/56.png"></li><li><p>持续集成执行计划配置。在＂执行计划＂页签，开启“定时执行”，根据需要设置定时执<br>行计划，单击＂保存＂。</p><img src="./images/57.png"></li></ul><h4 id="2-3-3-使用开源镜像站服务改进自动化编译"><a href="#2-3-3-使用开源镜像站服务改进自动化编译" class="headerlink" title="2.3.3 使用开源镜像站服务改进自动化编译"></a>2.3.3 使用开源镜像站服务改进自动化编译</h4><ul><li>使用Python构建:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN pip install -i https://repo.huaweicloud.com/repository/pypi/simple -r requirements.txt</span><br></pre></td></tr></table></figure><img src="./images/58.png"></li></ul><h2 id="三、持续部署与发布"><a href="#三、持续部署与发布" class="headerlink" title="三、持续部署与发布"></a>三、持续部署与发布</h2><h4 id="3-1-1-购买并配置弹性云服务器"><a href="#3-1-1-购买并配置弹性云服务器" class="headerlink" title="3.1.1 购买并配置弹性云服务器"></a>3.1.1 购买并配置弹性云服务器</h4><ul><li><p>购买 ECS 主机 ： 按照推荐配置购买</p><img src="./images/59.png"></li><li><p>进入主机管理页面,单击＂更改安全组规则＂，进入安全组管理界面,添加一条入方向规则＂允许访问 5000 以及<br>5001 端口＂</p><img src="./images/60.png"></li><li><p>添加授信主机。</p><img src="./images/61.png"></li><li><p>当出现以下提示时，表示主机添加成功。<br>&lt;<img src="./images/62.png">&gt;</p></li></ul><h4 id="3-1-2-使用-CodeArts-部署服务配置主机环境"><a href="#3-1-2-使用-CodeArts-部署服务配置主机环境" class="headerlink" title="3.1.2  使用 CodeArts 部署服务配置主机环境"></a>3.1.2  使用 CodeArts 部署服务配置主机环境</h4><ul><li><p>进入部署服务,配置如图三步，其中，shell命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libssl-dev libffi-dev python-dev build-essential libxml2-dev libxslt1-dev -y</span><br><span class="line"></span><br><span class="line">pip3 install six --user -U</span><br><span class="line"></span><br><span class="line">pip3 install -i https://repo.huaweicloud.com/repository/pypi/simple docker-compose==1.17.1</span><br></pre></td></tr></table></figure><p>python版本选择3.7</p><img src="./images/63.png"></li><li><p>保存并执行，等待成功安装</p> <img src="./images/64.png"></li></ul><h4 id="3-1-3-使用自动化部署实现一键部署"><a href="#3-1-3-使用自动化部署实现一键部署" class="headerlink" title="3.1.3 使用自动化部署实现一键部署"></a>3.1.3 使用自动化部署实现一键部署</h4><ul><li><p>持续部署配置,选择＂部署步骤＂页签，单击部署步骤＂选择部署来源＂，编译以下信息</p>  <img src="./images/65.png"></li><li><p>设置执行参数，分别一一对应swr的指令，最终部署成功</p><img src="./images/66.png"></li><li><p>验证部署结果。</p></li></ul><h3 id="3-2-持续交付流水线"><a href="#3-2-持续交付流水线" class="headerlink" title="3.2 持续交付流水线"></a>3.2 持续交付流水线</h3><h4 id="3-2-1-配置流水线串接代码检查，编译构建和自动化部署步骤"><a href="#3-2-1-配置流水线串接代码检查，编译构建和自动化部署步骤" class="headerlink" title="3.2.1 配置流水线串接代码检查，编译构建和自动化部署步骤"></a>3.2.1 配置流水线串接代码检查，编译构建和自动化部署步骤</h4><ul><li>进入流水线服务，单击＂新建流水线  <img src="./images/67.png"></li><li>自定义流水线任务<img src="./images/68.png"></li></ul><h4 id="3-2-2-更新流水线配置，实现代码变更触发的持续交付流水线"><a href="#3-2-2-更新流水线配置，实现代码变更触发的持续交付流水线" class="headerlink" title="3.2.2 更新流水线配置，实现代码变更触发的持续交付流水线"></a>3.2.2 更新流水线配置，实现代码变更触发的持续交付流水线</h4><ul><li>进入流水线服务,打开“代码提交时触发”  <img src="./images/69.png"></li></ul><h4 id="3-2-3-流水线配置高级功能"><a href="#3-2-3-流水线配置高级功能" class="headerlink" title="3.2.3 流水线配置高级功能"></a>3.2.3 流水线配置高级功能</h4><ul><li>添加人工审核  <img src="./images/70.png"></li></ul><h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><ul><li><p>删除云主机</p>  <img src="./images/71.png"></li><li><p>删除IDE实例</p><img src="./images/72.png"></li></ul><h3 id="四、总结感悟"><a href="#四、总结感悟" class="headerlink" title="四、总结感悟"></a>四、总结感悟</h3><p>本次通过华为云CodeArts进行项目规划，让我快速了解敏捷的方法和用 DevOps 思想完成软件项目的迭代规划、以及软件的开发、测试、部署。本次体验了git、docker镜像、SWR服务、一键部署、华为云ecs服务器等现代企业常用项目，让我身临其境感受到了企业实战开发情景。</p><p>华为云可以自动进行代码检查、项目构建、部署、发布，甚至可以使用流水线方式一键部署发布程序，这让我感受到了科技的便利。未来，我将深耕软件工程领域，不断学习到更多先进的技术。]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>9.18周报</title>
      <link href="/2024/09/18/9.18-zhou-bao/"/>
      <url>/2024/09/18/9.18-zhou-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="9-18周报"><a href="#9-18周报" class="headerlink" title="9.18周报"></a>9.18周报</h1><p><img src="https://sources0.oss-cn-beijing.aliyuncs.com/01.jpg"></img></p><h2 id="1-配置优先级"><a href="#1-配置优先级" class="headerlink" title="1.配置优先级"></a>1.配置优先级</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令行参数 &gt; java系统属性 &gt; propertities &gt; yml&gt; yaml</span><br></pre></td></tr></table></figure><h2 id="2-Bean管理"><a href="#2-Bean管理" class="headerlink" title="2.Bean管理"></a>2.Bean管理</h2><ol><li>①获取bean对象  ：先@Autowired application获取bean对象，然后用getBean获取bean对象（bean对象名称默认为首字母小写）</li></ol><p>②Bean的作用域 ：默认为单例，可以用@scope(prototype) 实现每次都创建新Bean对象</p><p>③第三方Bean：第三方依赖当中提供的类交给IOC容器管理，此时要在方法上加上一个@Bean注解</p><ol start="2"><li>导入工程范围外包的方法：@ComponentScan &#x2F; @Import &#x2F; @Enable****</li></ol><p>3.@SpringBootApplication 注解的组成</p><p>元注解+ @SpringBootConfiguration + @EnableAutoConfiguration+ @ComponentScan </p><p>4.@Conditional</p><p> 按照一定的条件进行判断，在满足给定条件后才会注册对应的bean对象到Spring的IOC容器中</p><h2 id="3-自定义starter案例"><a href="#3-自定义starter案例" class="headerlink" title="3.自定义starter案例"></a>3.自定义starter案例</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p> 定义aliyun-oss-spring-boot-starter，完成阿里云OSS操作工具类AliyunOSSUtils的自动配置。引入起步依赖引入之后，注入AliyunOSSUtils直接使用即可</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p> 1.创建starter+autoconfig 两个模块 starter的pom文件引入autoconfig依赖。通过依赖传递，后面直接引入starter即可</p><p>2.在autoconfig导入阿里云的工具类和属性类，并导入阿里云相关依赖，使其正常使用。</p><p>3.在autoconfig新建一个AliOSSAutoConfiguration类，通过@EnableConfigurationProperties注入属性，并使用@Bean把生成后的阿里云工具类交给ioc容器管理</p><p>4.新建测试类，在yml文件配置阿里云的属性信息，然后直接注入阿里云工具类。</p><p>注意：代码写完后一直报“空指针异常”错误，转天早上发现，是因为没有执行mvn install 命令刷新本地仓库，虽然代码写对，但maven仓库并没更新….修改了一天的bug</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>9.16周报</title>
      <link href="/2024/09/17/9.16-zhou-bao/"/>
      <url>/2024/09/17/9.16-zhou-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="9-16-周报"><a href="#9-16-周报" class="headerlink" title="9.16 周报"></a>9.16 周报</h1><p><img src="https://sources0.oss-cn-beijing.aliyuncs.com/IMG_20240914_180500.jpg"></img></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ol><li>@Transactional注解 实现事务控制； 默认只对runtimeException回滚，使用 rollbackfor &#x3D; “Exception.class”  实现对特定异常进行回滚 </li><li>事务传播行为@propagational ，【默认值】REQUIRED :需要事务，有则加入，无则创建新事务;  REQUIRED_NEW: 事务之间不相互影响</li></ol><h2 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>在pom文件中导入依赖</li><li>编写程序，在程序中使用@Aspect注解</li></ol><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li>连接点：被AOP控制的方法</li><li>通知：Advice，指重复的逻辑，也就是共性功能</li><li>切入点:PointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用</li><li>切面：Aspect，描述通知与切入点的对应关系（通知+切入点）</li><li>目标对象：Target，通知所应用的对象</li></ol><h3 id="通知的基本类型"><a href="#通知的基本类型" class="headerlink" title="通知的基本类型"></a>通知的基本类型</h3><ul><li>环绕通知（默认）: @Around ，此注解标注的通知方法在目标方法前、后都被执行</li><li>前置通知:@Before</li><li>后置通知:@After</li><li>异常通知：@AfterThrowing 抛出异常后执行通知</li><li>返回后通知：@AfterReturning 此注解标注的通知方法在目标方法后被执行，有异常不会执<br>行</li></ul><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><ol><li>execution(访问修饰符? 返回值 包名.类名.?方法名(方法参数) throws 异常?)</li><li>@annotation 使用注解匹配多个无规则的方法</li></ol><h2 id="AOP案例"><a href="#AOP案例" class="headerlink" title="AOP案例"></a>AOP案例</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>将案例中增、删、改相关接口的操作日志记录到数据库表中</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>新建@Mylog注解，标注在所有增删改的Controller方法上</li><li>新建数据库log表格，新建OperateLog实体类，定义Mapper和Service层接口</li><li>定义切面类</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>9.8周报</title>
      <link href="/2024/09/08/9.8-zhou-bao/"/>
      <url>/2024/09/08/9.8-zhou-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="9-8周报"><a href="#9-8周报" class="headerlink" title="9.8周报"></a>9.8周报</h1><p><img src="https://sources0.oss-cn-beijing.aliyuncs.com/IMG_20240907_174829_1.jpg"></img></p><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><ul><li>配置文件三种方式<ul><li>@value</li><li>yml配置文件（常用）；yml基本语法：树结构，用空格分隔，”:”后写数据</li><li>@ConfigurationProperties</li></ul></li><li>登录校验<ul><li>会话技术<ul><li>Cookie</li><li>Session</li><li>JWT令牌（常用）</li></ul></li><li>统一拦截技术  <ul><li>Filter过滤器<ul><li>过滤器：执行流程 ；拦截路径：”&#x2F;*“ ”&#x2F;path“  ； 过滤器链  ；</li></ul></li><li>interceptor拦截器（常用）；<ul><li>拦截器：拦截路径（&#x2F;* 和 &#x2F;**的区别） ； 执行流程：Filter -&gt; DispatcherServelet -&gt; Interceptor -&gt; Controller</li></ul></li></ul></li></ul></li><li>异常处理<ul><li>全局异常处理器@RestControllerAdvice</li><li>使用@ExceptionHandler捕获特定类型的异常</li></ul></li></ul><h2 id="使用阿里云服务器-域名-部署vue-Spring-前后端分离项目"><a href="#使用阿里云服务器-域名-部署vue-Spring-前后端分离项目" class="headerlink" title="使用阿里云服务器+域名 部署vue+Spring 前后端分离项目"></a>使用阿里云服务器+域名 部署vue+Spring 前后端分离项目</h2><pre><code>* 注意事项    * 记得开放云服务器端口    * 学会看nginx.config；application.yml文件，会更改配置</code></pre><h2 id="使用hexo-git-github搭建个人博客（更简单）"><a href="#使用hexo-git-github搭建个人博客（更简单）" class="headerlink" title="使用hexo+git+github搭建个人博客（更简单）"></a>使用hexo+git+github搭建个人博客（更简单）</h2><ul><li>了解git，hexo常见命令<ul><li>hexo-g&#x2F;-d&#x2F;s&#x2F;clean</li><li>学习使用hexo更换主题</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
